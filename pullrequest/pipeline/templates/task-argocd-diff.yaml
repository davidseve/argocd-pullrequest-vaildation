apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-task-diff
  namespace: ci  
spec:
  workspaces:
    - name: diff-result
    - name: source 
  params:
    - name: revision
      description: the revision to sync to
      default: HEAD
      type: string
    - name: flags
      default: --
      type: string
    - name: argocd-version
      default: v2.2.2 
      type: string
  stepTemplate:
    envFrom:
      - configMapRef:
          name: argocd-env-configmap  # used for server address
      - secretRef:
          name: argocd-env-secret  # used for authentication (username/password or auth token)
  steps:
    - name: diff
      image: quay.io/argoproj/argocd:$(params.argocd-version)   
      script: |
        rm -f $(workspaces.diff-result.path)/diff-output.txt
        rm -f $(workspaces.diff-result.path)/argocd-applications.txt
        rm -f $(workspaces.diff-result.path)/argocd-applications-unique.txt
        cat $(workspaces.source.path)/repository/git-diff.txt      
        # Read the file path from the command line argument
        file_path="$(workspaces.source.path)/repository/git-diff.txt"
       
        # Check if the file exists
        if [ ! -f "$file_path" ]; then
            echo "File $file_path not found."
            exit 1
        fi

        # Define the list of values
        cloud1="mov te"
        cloud2="mov"

        # Read the content of the file
        while IFS= read -r line; do
            # Extract the content before the first '/'
            application=$(echo "$line" | awk -F'/' '{print $1}')

            if echo $line | grep -q "/clusters/"; then
                cluster_values=$(echo "$line" | awk -F'/clusters/' '{print tolower($2)}')
                cluster_name=$(echo $cluster_values | sed 's/^value-\(.*\)\.yaml$/\1/')
                result="$cluster_name-$application"
                echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
            elif echo $line | grep -q "/templates/"; then
                for value in $cloud1; do
                    result="ocp-01-$value-$application"
                    echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                done
                for value in $cloud2; do
                    result="ocp-02-$value-$application"
                    echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                done
            #TODO add another if the change is in the Chart.yaml and/or values.yaml
            elif echo $line | grep -q "/base/"; then
                for value in $cloud1; do
                    result="ocp-01-$value-$application"
                    echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                done
                for value in $cloud2; do
                    result="ocp-02-$value-$application"
                    echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                done
            elif echo $line | grep -q "/overlays/"; then
                cluster=$(echo "$line" | awk -F'/overlays/' '{print tolower($2)}')
                cluster=$(echo "$cluster" | awk -F'/' '{print $1}')
                result="$cluster-$application"
                echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
            else                
              for value in $cloud1; do
                  # Check if the content contains the first pattern
                  if echo $line | grep -q "/cloud-1/"; then
                      result="ocp-01-$value-$application"
                      echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                  fi
              done
              for value in $cloud2; do
                  if echo $line | grep -q "/cloud-2/"; then
                      result="ocp-02-$value-$application"
                      echo "$result" >> $(workspaces.diff-result.path)/argocd-applications.txt
                  fi
              done
            fi

        done < "$file_path"

        sort -u "$(workspaces.diff-result.path)/argocd-applications.txt" > "$(workspaces.diff-result.path)/argocd-applications-unique.txt"

        argocd_diff() {
            echo "Argo CD diff application=$1"
            local application="$1"
            if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
              yes | argocd login "$ARGOCD_SERVER" --username="$ARGOCD_USERNAME" --password="$ARGOCD_PASSWORD";
            fi
            set +e
            argocd app diff $application --revision "$(params.revision)" "$(params.flags)" >> $(workspaces.diff-result.path)/diff-output.txt 2>&1
            local status=$?
            echo "Argo CD diff response=$status"
            #TODO manage when argocd app diff return error
            
            if [ $status -eq 0 ] 
            then 
              echo "No diff is found" 
            else 
              cat $(workspaces.diff-result.path)/diff-output.txt
              echo "Diff is found" >&2 
            fi
            
        }

        while IFS= read -r line; do
          argocd_diff $line
        done < "$(workspaces.diff-result.path)/argocd-applications-unique.txt"














