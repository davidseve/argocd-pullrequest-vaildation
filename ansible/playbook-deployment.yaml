---
- name: Deploy ArgoCD Cluster in OpenShift
  hosts: localhost
  # Declarar estas variables ------------------------------------------------
  # OCP_URL: OpenShift API for command line 'oc' client: https://api.cluster-jpd27.dynamic.redhatworkshops.io:6443
  # export OCP_URL='https://api.cluster-jpd27.dynamic.redhatworkshops.io:6443/'
  #
  # export OPENSHIFT_USERNAME='your_username'  // User should be cluster admin
  # export OPENSHIFT_PASSWORD='your_password'  // Password
  # export KUBECONFIG='/path/to/your/kubeconfig'  # Esta variable debe apuntar a tu archivo de configuraciÃ³n de kubectl
  # ---------------------------------------------------------------------------
  vars:
    ocp_url: "{{ lookup('env', 'OCP_URL') }}" 
    ocp_namespace: "telefonica"
    operators_namespace: "openshift-operators"
  tasks:
    - name: Login to OpenShift
      redhat.openshift.openshift_auth:
        host: "{{ ocp_url }}"
        username: "{{ lookup('env', 'OPENSHIFT_USERNAME') }}"
        password: "{{ lookup('env', 'OPENSHIFT_PASSWORD') }}"
        validate_certs: false


    - name: Create Telefonica namespace
      redhat.openshift.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ ocp_namespace }}"

    - name: Install Openshift Pipeline & Openshift GitOps
      ansible.builtin.command: "oc apply -f ../cluster-configuration"
      register: apply_output
      
    - name: Show retult of apply output
      ansible.builtin.debug:
        var: apply_output.stdout

    - name: Verify GitOps Operator is available
      command: "oc get deployment openshift-gitops-operator-controller-manager -n {{ operators_namespace }} -o yaml"
      register: gitops_operator_output
      retries: 10
      delay: 30
      until: gitops_operator_output.stdout | from_yaml | json_query('status.availableReplicas') | int > 0

    - name: Verify Pipeline Operator is available
      command: "oc get deployment openshift-pipelines-operator -n {{ operators_namespace }} -o yaml"
      register: pipelines_operator
      until: pipelines_operator.stdout | from_yaml | json_query('status.availableReplicas') | int > 0
      retries: 30
      delay: 10
    
    - name: Deploy Bitbucket integration objects
      command: "oc apply -f ../pullrequest/pipeline/templates/bitbucket -n {{ ocp_namespace }}"
      register: bitbucket_integration
      
    - name: Show retult of Bitbucket integration
      ansible.builtin.debug:
        var: bitbucket_integration.stdout

    - name: Set SA to Deployment
      command: "oc set serviceaccount deployment/el-pipeline-validacion-eventlistener tekton-triggers-admin"
      register: sa_deployment_integration

    - name: Show retult of SA output
      ansible.builtin.debug:
        var: sa_deployment_integration.stdout

    # GENERO LA ROUTE QUE DEBO SETEAR EN Bitbucket ------------
    - name: Generate the Eventlistener Route
      command: "oc expose svc/el-pipeline-validacion"
      # register: eventlistener_route

    - name: Get the Eventlistener Route
      command: "oc get route el-pipeline-validacion -o jsonpath='{.spec.host}'"
      register: eventlistener_route
    
    - name: Show URL del Webhook
      ansible.builtin.debug:
        msg: "URL del Webhook (en Bitbucket) debe ser: http://{{ eventlistener_route.stdout }}" 
     # GENERO LA ROUTE QUE DEBO SETEAR EN Bitbucket ------------

    # REINICIO EL POD DEL Eventlistener
    - name: Get pod
      command: "oc get pod -l eventlistener=pipeline-validacion-eventlistener -o name"
      register: pod_eventlistener
    
    - name: Pod to delete
      ansible.builtin.debug:
        var: pod_eventlistener.stdout

    - name: Delete Eventlistener pod 
      command: "oc delete {{ pod_eventlistener.stdout }}"
      register: pod_deleted

    - name: Show retult of Pod deleted
      ansible.builtin.debug:
        var: pod_deleted.stdout
    # # ------------------------------------------------ #
    # - name: Configure Argo CD instance
    #   ansible.builtin.command: "oc apply -f ../argocd-configuration"
    #   register: argocd_configuration_output
      
    # - name: Show retult of apply output
    #   ansible.builtin.debug:
    #     var: argocd_configuration_output.stdout

    # - name: Get ArgoCD Server
    #   ansible.builtin.command: "oc -n openshift-gitops get route openshift-gitops-server -o jsonpath='{.spec.host}'"
    #   register: argocd_host_output
      
    # - name: Show retult of ArgoCD Server output
    #   ansible.builtin.debug:
    #     var: argocd_host_output.stdout

    # - name: Get ArgoCD admin credentials
    #   ansible.builtin.command: "oc extract secret/openshift-gitops-cluster -n openshift-gitops --to=-"
    #   register: argocd_pass
      
    # - name: Show retult of ArgoCD credentials
    #   ansible.builtin.debug:
    #     var: argocd_pass.stdout

    # - name: Generate a new token for the account pipeline-account
    #   ansible.builtin.command: "argocd login {{ argocd_host_output.stdout }} --username admin --password {{ argocd_pass.stdout }} --insecure"
    #   register: argocd_token_output
      
    # - name: Show retult of ArgoCD credentials
    #   ansible.builtin.debug:
    #     var: argocd_token_output.stdout

    # - name: Generate a new token for the account pipeline-account
    #   ansible.builtin.command: "argocd account generate-token --account pipeline-account"
    #   register: argocd_token_created_output
      
    # - name: Show retult of ArgoCD credentials
    #   ansible.builtin.debug:
    #     var: argocd_token_created_output.stdout

    # # ------------------------------------------------ #
    # # - name: Deploy pipelines
    # #   ansible.builtin.command: "helm upgrade pipelines ../pullrequest/pipeline/ --install --set argocd.token={{ argocd_token_created_output }}"
    # #   register: helm_output
      
    # # - name: Show retult of pipelines
    # #   ansible.builtin.debug:
    # #     var: helm_output.stdout

    # # - name: Deploy application Set
    # #   ansible.builtin.command: "oc apply -f ../argocd/appset-discount-kustomize.yaml -n {{ ocp_namespace }}"
    # #   register: app_set_output
      
    # # - name: Show retult of Application Set
    # #   ansible.builtin.debug:
    # #     var: app_set_output.stdout

    # # - name: Deploy application Set 2
    # #   ansible.builtin.command: "oc apply -f ../argocd/appset-discount-helm.yaml"
    # #   register: app_set_output
      
    # # - name: Show retult of Application Set 2
    # #   ansible.builtin.debug:
    # #     var: app_set_output.stdout